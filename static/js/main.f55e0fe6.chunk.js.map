{"version":3,"sources":["comps/searchbox/SearchBox.js","comps/main/Main.js","comps/forecast/Forecast.js","comps/loader/Loader.js","cont/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","query","onSearchChange","onBtnSubmit","react_default","a","createElement","className","onSubmit","type","name","placeholder","autoFocus","onChange","Main","current","location","logo","condition","icon","country","src","alt","temp_c","text","feelslike_c","humidity","Forecast","onClick","console","log","Loader","API_KEY","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clima","defaultURL","concat","error","isLoaded","handleSearchChange","bind","assertThisInitialized","handleSubmit","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fetch","then","response","json","jsonData","replace","catch","err","event","target","value","_this3","preventDefault","elements","searchfield","length","_this$state$clima","forecast","searchbox_SearchBox","main_Main","forecast_Forecast","loader_Loader","Component","Boolean","window","hostname","match","ReactDOM","render","src_cont_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f55e0fe6.chunk.js","sourcesContent":["import React from 'react';\n// import icon from './search-icon.svg';\n\nconst SearchBox = ({ query, onSearchChange, onBtnSubmit }) => {\n  return (\n    <form className=\"SearchBox\" onSubmit={onBtnSubmit}>\n      <input\n        className=\"input\"\n        type=\"search\"\n        name=\"searchfield\"\n        placeholder=\"ciudad/coordenadas...\"\n        autoFocus={true}\n        onChange={onSearchChange}\n\n      />\n      <button type='submit' className='search-btn' name=\"search-btn\">\n        Buscar\n        {/* <svg id=\"search-icon\" class=\"search-icon\">\n          <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n          <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        </svg> */}\n      </button>\n    </form>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Main = ({current, location}) => {\n  const logo = current.condition.icon;\n  return (\n    <div className='Main'>\n      <h2 className=\"location\">{location.name}, {location.country}</h2>\n\n      <div className='main-temp'>\n        <div className=\"temp-cond\">\n          <img src={logo} alt=\"imagen de clima\" className=\"icon-weather\" />\n          <h1 className=\"temp\">{current.temp_c}°C</h1>\n        </div>\n      </div>\n\n      <p className=\"subtext\">{current.condition.text}</p>\n      <div className=\"conditions\">\n        <p className=\"feelslike\">ST: {current.feelslike_c} °C</p>\n        <p className=\"humidity\">Hum: {current.humidity} %</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\nimport Card from './Card';\n\nconst Forecast = () => {\n  return (\n    <div className=\"Forecast\">\n      <button className='btn-getDays'\n              onClick={() => console.log('clicking')}\n              >\n      Pronóstico a 5 días\n      </button>\n      {/* <Card />\n      <Card />\n      <Card />\n      <Card /> */}\n    </div>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\n\n\nconst Loader = () => {\n    return (\n        <div className=\"wrapper\">\n            <h3>Loading...</h3>\n            <div className=\"spinner spinner-1\"></div>\n        </div>\n    );\n}\n\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport 'normalize.css';\nimport './App.css';\nimport SearchBox from '../comps/searchbox/SearchBox';\nimport Main from '../comps/main/Main';\nimport Forecast from '../comps/forecast/Forecast';\nimport searchToggle from '../comps/searchbox/searchToggle';\nimport Loader from '../comps/loader/Loader';\n// https://api.apixu.com/v1/forecast.json?key=https://wt-9fc35a21c84ecf4c970badb28c44af3b-0.sandbox.auth0-extend.com/weather-apixu&lang=es&days=7&q=-37.838848,-57.50456319999999\n// https://api.apixu.com/v1/forecast.json?key=<YOUR_API_KEY>&q=Buenos+Aires&days=6\n\n\nconst API_KEY = '52e199fdabf04dcbb76111911191702';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      clima: {},\n      query: 'buenos aires',\n      defaultURL: `https://api.apixu.com/v1/forecast.json?key=${API_KEY}&lang=es&days=7`,\n      error: false,\n      isLoaded: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    // AGREGAR GEOLOCATION\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({query:`${position.coords.latitude},${position.coords.longitude}`});\n\n    // FETCH DATA FROM API\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128')\n          this.setState({\n          clima: jsonData,\n          isLoaded: true\n          })\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      });\n  }\n\n// HANDLE SEARCH INPUT VALUE\n  handleSearchChange(event) {\n    this.setState({ query: event.target.value });\n  }\n\n// HANDLE FORM SUBMIT EVENT\n  handleSubmit(event) {\n    event.preventDefault();\n    if (event.target.elements.searchfield.value.length > 0) {\n      // this.setState({query: event.target.elements.searchfield.value});\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128');\n          this.setState({clima: jsonData });\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      }\n\n  }\n\n\n  render() {\n    const { location, current, forecast } = this.state.clima;\n\n    if (!this.state.error) {\n      console.log('Rendering, everything looks good...');\n    }\n    //conditional rendering ternary start\n    return this.state.isLoaded\n\n    ? (\n      <div className=\"App\">\n        <SearchBox\n          onSearchChange={this.handleSearchChange}\n          onBtnSubmit={this.handleSubmit}\n          query={this.state.query}\n        />\n        <Main\n          current={current}\n          location={location}\n        />\n        <Forecast forecast={forecast}/>\n\n      </div>\n    )\n\n    : (\n      <Loader />\n    )\n    //conditional rendering ternary finish\n\n\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './cont/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
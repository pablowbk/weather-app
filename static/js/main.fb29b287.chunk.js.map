{"version":3,"sources":["comps/searchbox/SearchBox.js","comps/main/UvMeter.js","comps/main/Main.js","comps/forecast/Forecast.js","comps/loader/Loader.js","cont/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","query","onSearchChange","onBtnSubmit","react_default","a","createElement","className","onSubmit","type","name","placeholder","autoFocus","onChange","version","id","xmlns","x","y","viewBox","d","UvMeter","currentUV","concat","style","color","Main","current","location","logo","condition","icon","country","src","alt","temp_c","text","uv","main_UvMeter","feelslike_c","humidity","Forecast","forecast","getWeekDay","onClick","e","preventDefault","document","querySelector","classList","toggle","forecastday","map","day","key","date","date_epoch","parseInt","maxtemp_c","mintemp_c","Loader","API_KEY","semana","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clima","defaultURL","error","isLoaded","handleSearchChange","bind","assertThisInitialized","handleSubmit","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fetch","then","response","json","jsonData","replace","catch","err","console","log","fecha","Date","getDay","event","target","value","_this3","elements","searchfield","length","_this$state$clima","searchbox_SearchBox","main_Main","forecast_Forecast","loader_Loader","Component","Boolean","window","hostname","match","ReactDOM","render","src_cont_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb29b287.chunk.js","sourcesContent":["import React from 'react';\n// import lupita from './magnifying-glass-browser.svg';\n\nconst SearchBox = ({ query, onSearchChange, onBtnSubmit }) => {\n  return (\n    <form className=\"SearchBox\" onSubmit={onBtnSubmit}>\n      <input\n        className=\"input\"\n        type=\"search\"\n        name=\"searchfield\"\n        placeholder=\"Ingrese ciudad/coords...\"\n        autoFocus={true}\n        onChange={onSearchChange}\n      />\n      <button type='submit' className='search-btn' name=\"search-btn\">\n        <svg version=\"1.1\" id=\"lupita-svg\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 500 500\"\n        >\n          <g>\n            <g>\n              <path className=\"lupita-path\" d=\"M332.74,315.35c30.883-33.433,50.15-78.2,50.15-127.5C382.89,84.433,298.74,0,195.04,0S7.19,84.433,7.19,187.85\n                S91.34,375.7,195.04,375.7c42.217,0,81.033-13.883,112.483-37.4l139.683,139.683c3.4,3.4,7.65,5.1,11.9,5.1s8.783-1.7,11.9-5.1\n                c6.517-6.517,6.517-17.283,0-24.083L332.74,315.35z M41.19,187.85C41.19,103.133,110.04,34,195.04,34\n                c84.717,0,153.85,68.85,153.85,153.85S280.04,341.7,195.04,341.7S41.19,272.567,41.19,187.85z\"/>\n              </g>\n            </g>\n        </svg>\n        {/* Buscar */}\n      </button>\n    </form>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst UvMeter = ({currentUV}) => {\n  return (\n    <div className=\"uv-meter\">\n      <div className={`bar-content ${\n        currentUV < 1\n        ? 'low'\n        : currentUV === 1\n        ? 'low-one'\n        : currentUV === 2\n        ? 'low-two'\n        : currentUV === 3\n        ? 'mod-three'\n        : currentUV === 4\n        ? 'mod-four'\n        : currentUV === 5\n        ? 'mod-five'\n        : currentUV === 6\n        ? 'high-six'\n        : currentUV === 7\n        ? 'high-seven'\n        : currentUV === 8\n        ? 'very-high-eight'\n        : currentUV === 9\n        ? 'very-high-nine'\n        : currentUV === 10\n        ? 'very-high-ten'\n        : currentUV >= 11\n        ? 'ext'\n        : null\n      }`}>\n      </div>\n      <div\n        className=\"uv-bar-inside\"\n        style={currentUV < 8 ? {color: '#000'} : null}\n        >{\n        currentUV < 3\n        ? 'Bajo'\n        : currentUV < 6\n        ? 'Moderado'\n        : currentUV < 8\n        ? 'Alto'\n        : currentUV < 11\n        ? 'Muy Alto'\n        : currentUV >= 11\n        ? 'Extremo'\n        : null\n      }</div>\n    </div>\n  );\n}\n\nexport default UvMeter;\n","import React from 'react';\nimport UvMeter from './UvMeter';\n\nconst Main = ({current, location}) => {\n  const logo = current.condition.icon;\n  return (\n    <div className='Main'>\n      <h2 className=\"location\">{location.name}, {location.country}</h2>\n\n      <div className='main-temp'>\n        <div className=\"temp-cond\">\n          <img src={logo} alt=\"imagen de clima\" className=\"icon-weather\" />\n          <h1 className=\"temp\"\n            style={\n              current.temp_c <= -10 ? {color: 'rgba(149, 136, 211,1)'}\n              : current.temp_c <= 0\n              ? {color: 'rgba(150, 208, 216,1)'}\n              : current.temp_c <= 10\n              ? {color: 'rgba(94, 143, 197,1)'}\n              : current.temp_c <= 18\n              ? {color: 'rgba(79, 139, 61,1)'}\n              : current.temp_c <= 25\n              ? {color: 'rgba(222, 177, 6,1)'}\n              : current.temp_c <= 34\n              ? {color: 'rgba(190, 65, 18,1)'}\n              : current.temp_c > 34\n              ? {color: 'rgba(138, 42, 10,1)'}\n              : null\n            }\n            >\n            {current.temp_c}°C\n          </h1>\n        </div>\n      </div>\n      <p className=\"subtext\">{current.condition.text}</p>\n\n      <div className=\"uv\">\n        <div>Ind/UV: <span>{current.uv}</span></div>\n        <UvMeter currentUV={current.uv}/>\n      </div>\n\n      <div className=\"conditions\">\n        <p className=\"feelslike\">ST: {current.feelslike_c} °C</p>\n        <p className=\"humidity\">Hum: {current.humidity} %</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\n\nconst Forecast = ({forecast, getWeekDay}) => {\n  return (\n    <div className=\"Forecast\">\n      <button className='btn-getDays'\n              onClick=\n              {(e) => {\n                e.preventDefault();\n                const cardslist = document.querySelector('.CardsList');\n                cardslist.classList.toggle('outtasight');\n                }\n              }\n            >\n      Pronóstico 7 días\n      </button>\n      <div className=\"CardWrapper\">\n        <div className=\"CardsList outtasight\">\n          {\n            forecast.forecastday.map(day => {\n              return (\n                <div className=\"Card\" key={day.date}>\n                  <h5>{getWeekDay(day.date_epoch)}</h5>\n                  <h6>{day.date}</h6>\n                  <div className=\"card-condition\">\n                    <img src={day.day.condition.icon} alt=\"Clima Diario\" className=\"card-img\"/>\n                    <p className=\"card-condition-text\">\n                      <span>\n                        {day.day.condition.text}\n                      </span>\n                    </p>\n                  </div>\n                  <div className=\"card-minmax\">\n                    <p>\n                      <span className=\"card-tempmax\">\n                        {parseInt(day.day.maxtemp_c)}°\n                      </span>\n                    </p>\n                    <p>\n                      <span className=\"card-tempmin\">\n                        {parseInt(day.day.mintemp_c)}°\n                      </span>\n                    </p>\n                  </div>\n                </div>\n              )\n            })\n          }\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\n\n\nconst Loader = () => {\n    return (\n        <div className=\"wrapper\">\n            <h3>Iniciando...</h3>\n            <div className=\"spinner spinner-1\"></div>\n            {/* <progress></progress> */}\n        </div>\n    );\n}\n\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport 'normalize.css';\nimport './App.css';\nimport SearchBox from '../comps/searchbox/SearchBox';\nimport Main from '../comps/main/Main';\nimport Forecast from '../comps/forecast/Forecast';\nimport Loader from '../comps/loader/Loader';\n\n// https://api.apixu.com/v1/forecast.json?key=https://wt-9fc35a21c84ecf4c970badb28c44af3b-0.sandbox.auth0-extend.com/weather-apixu&lang=es&days=7&q=-37.838848,-57.50456319999999\n// https://api.apixu.com/v1/forecast.json?key=<YOUR_API_KEY>&q=Buenos+Aires&days=6\n\n\nconst API_KEY = '52e199fdabf04dcbb76111911191702';\nconst semana = [\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\", \"Sábado\",\n\"Domingo\"];\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      clima: {},\n      query: 'buenos aires',\n      defaultURL: `https://api.apixu.com/v1/forecast.json?key=${API_KEY}&lang=es&days=7`,\n      error: false,\n      isLoaded: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getWeekDay = this.getWeekDay.bind(this);\n  }\n\n  componentDidMount() {\n    // AGREGAR GEOLOCATION\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({query:`${position.coords.latitude},${position.coords.longitude}`});\n\n      // FETCH DATA FROM API\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n      .then(response => response.json())\n      .then(jsonData => {\n        jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128')\n        this.setState({\n          clima: jsonData,\n          isLoaded: true\n        })\n      })\n      .catch(err =>  {\n        this.setState({error: true})\n        console.log('an error occurred: ', err)\n      })\n      //End of Fetch\n    });\n  }\n\n//TRANSALTE DATE FROM API TO WEEKDAY\ngetWeekDay(fecha) {\n  return semana[new Date(fecha * 1000).getDay()];\n}\n\n// HANDLE SEARCH INPUT VALUE\n  handleSearchChange(event) {\n    this.setState({ query: event.target.value });\n  }\n\n// HANDLE FORM SUBMIT EVENT\n  handleSubmit(event) {\n    event.preventDefault();\n    if (event.target.elements.searchfield.value.length > 0) {\n      // this.setState({query: event.target.elements.searchfield.value});\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128');\n          this.setState({clima: jsonData });\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      }\n\n  }\n\n\n  render() {\n    const { location, current, forecast } = this.state.clima;\n\n    if (!this.state.error) {\n    }\n    //conditional rendering ternary start\n    return this.state.isLoaded\n\n    ? (\n      <div className=\"App\"\n        // style={\n        //     current.temp_c <= -10 ? {backgroundColor: 'rgba(149, 136, 211,0.05)'}\n        //     : current.temp_c <= 0\n        //     ? {backgroundColor: 'rgba(150, 208, 216,0.05)'}\n        //     : current.temp_c <= 10\n        //     ? {backgroundColor: 'rgba(94, 143, 197,0.05)'}\n        //     : current.temp_c <= 18\n        //     ? {backgroundColor: 'rgba(79, 139, 61,0.05)'}\n        //     : current.temp_c <= 25\n        //     ? {backgroundColor: 'rgba(222, 177, 6,0.05)'}\n        //     : current.temp_c <= 34\n        //     ? {backgroundColor: 'rgba(190, 65, 18,0.05)'}\n        //     : current.temp_c > 34\n        //     ? {backgroundColor: 'rgba(138, 42, 10,0.05)'}\n        //     : null\n        //   }\n        >\n        <SearchBox\n          onSearchChange={this.handleSearchChange}\n          onBtnSubmit={this.handleSubmit}\n          query={this.state.query}\n        />\n        <Main\n          current={current}\n          location={location}\n        />\n        {/* <More /> */}\n        <Forecast forecast={forecast} getWeekDay={this.getWeekDay}/>\n      </div>\n    )\n\n    : (\n      <Loader />\n    )\n    //conditional rendering ternary finish\n\n\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './cont/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
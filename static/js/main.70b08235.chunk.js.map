{"version":3,"sources":["comps/searchbox/SearchBox.js","comps/main/Main.js","comps/forecast/Forecast.js","cont/App.js","serviceWorker.js","index.js"],"names":["searchStyle","padding","outlineStyle","borderRadius","border","SearchBox","_ref","searchfield","onSearchChange","react_default","a","createElement","className","style","type","placeholder","onChange","autoFocus","Main","current","location","logo","condition","icon","src","alt","temp_c","name","country","text","feelslike_c","humidity","Forecast","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clima","query","defaultURL","concat","process","REACT_APP_API_KEY","error","isLoaded","handleSearchChange","bind","assertThisInitialized","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fetch","then","response","json","jsonData","replace","catch","err","console","log","event","target","value","_this$state$clima","forecast","searchbox_SearchBox","main_Main","forecast_Forecast","Component","Boolean","window","hostname","match","ReactDOM","render","src_cont_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70b08235.chunk.js","sourcesContent":["import React from 'react';\n\nconst searchStyle = {\n  padding: '10px',\n  outlineStyle: 'none',\n  borderRadius: '10px',\n  border: 'none'\n}\n\nconst SearchBox = ({ searchfield, onSearchChange }) => {\n  return (\n    <div className=\"SearchBox\">\n      <input\n        className=\"input\"\n        style={searchStyle}\n        type=\"search\"\n        placeholder=\"Type a city name\"\n        onChange={onSearchChange}\n        autoFocus\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Main = ({current, location}) => {\n  const logo = current.condition.icon;\n  return (\n    <div className='Main'>\n      <img src={logo} alt=\"imagen de clima\" className=\"icon-weather\" />\n      <h1 className=\"temp\">{current.temp_c} °C</h1>\n      <h2 className=\"city\">{location.name}, {location.country}</h2>\n      <h4 className=\"subtext\">{current.condition.text}</h4>\n      <div className=\"feelslike\">ST: {current.feelslike_c} °C</div>\n      <div>H: {current.humidity} %</div>\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\nconst Forecast = () => {\n  return (\n    <div className='Forecast'>Forecast here</div>\n  );\n}\n\nexport default Forecast;\n","import React, { Component } from \"react\";\nimport 'normalize.css';\nimport './App.css';\nimport SearchBox from '../comps/searchbox/SearchBox';\nimport Main from '../comps/main/Main';\nimport Forecast from '../comps/forecast/Forecast';\n\n// https://api.apixu.com/v1/forecast.json?key=<YOUR_API_KEY>&q=Buenos+Aires&days=6\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      clima: {},\n      query: 'buenos aires',\n      defaultURL: `https://api.apixu.com/v1/forecast.json?key=${process.env.REACT_APP_API_KEY}&lang=es&days=6`,\n      error: false,\n      isLoaded: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n  }\n\n  componentDidMount() {\n    // AGREGAR GEOLOCATION\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({query:`${position.coords.latitude},${position.coords.longitude}`});\n\n    // FETCH DATA FROM API\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128')\n          this.setState({\n          clima: jsonData,\n          isLoaded: true\n          })\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      });\n  }\n\n// HANDLE SEARCH INPUT VALUE\n  handleSearchChange(event) {\n    this.setState({ query: event.target.value })\n  }\n\n\n  render() {\n    const { location, current, forecast } = this.state.clima;\n\n    if (!this.state.error) {\n      console.log('everything looks good...');\n    }\n\n    return this.state.isLoaded ? (\n      <div className=\"App\">\n        <SearchBox onSearchChange={this.handleSearchChange}/>\n        <Main\n          current={current}\n          location={location}\n        />\n        <Forecast forecast={forecast}/>\n      </div>\n    ) : (\n      <div className=\"App\">Loading...</div>\n    )\n\n\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './cont/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["comps/searchbox/SearchBox.js","comps/main/Main.js","comps/forecast/Forecast.js","cont/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","query","onSearchChange","onBtnSubmit","react_default","a","createElement","className","onSubmit","type","name","placeholder","autoFocus","Main","current","location","logo","condition","icon","text","feelslike_c","humidity","src","alt","temp_c","country","Forecast","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clima","defaultURL","concat","process","REACT_APP_API_KEY","error","isLoaded","handleSearchChange","bind","assertThisInitialized","handleSubmit","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","fetch","then","response","json","jsonData","replace","catch","err","console","log","event","target","value","_this3","preventDefault","elements","searchfield","length","_this$state$clima","forecast","searchbox_SearchBox","main_Main","forecast_Forecast","Component","Boolean","window","hostname","match","ReactDOM","render","src_cont_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d00c0afd.chunk.js","sourcesContent":["import React from 'react';\n// import icon from './search-icon.svg';\n\nconst SearchBox = ({ query, onSearchChange, onBtnSubmit }) => {\n  return (\n    <form className=\"SearchBox\" onSubmit={onBtnSubmit}>\n      <input\n        className=\"input\"\n        type=\"search\"\n        name=\"searchfield\"\n        placeholder=\"Type a city name\"\n        autoFocus={true}\n\n      />\n      <button\n        type='submit'\n        className='search-btn'\n        name=\"search-btn\"\n        >\n        Search\n      </button>\n    </form>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Main = ({current, location}) => {\n  const logo = current.condition.icon;\n  return (\n    <div className='Main'>\n      <div className=\"condition\">\n        <div className=\"info\">\n          <p className=\"subtext\">{current.condition.text}</p>\n          <p className=\"feelslike\">ST: {current.feelslike_c} °C, Hum: {current.humidity} %</p>\n        </div>\n      </div>\n      <div className='main-temp'>\n        <img src={logo} alt=\"imagen de clima\" className=\"icon-weather\" />\n        <h1 className=\"temp\">{current.temp_c} °C</h1>\n      </div>\n      <h2 className=\"city\">{location.name}, {location.country}</h2>\n\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\nconst Forecast = () => {\n  return (\n    <div className='Forecast'>Forecast here</div>\n  );\n}\n\nexport default Forecast;\n","import React, { Component } from \"react\";\nimport 'normalize.css';\nimport './App.css';\nimport SearchBox from '../comps/searchbox/SearchBox';\nimport Main from '../comps/main/Main';\nimport Forecast from '../comps/forecast/Forecast';\n\n// https://api.apixu.com/v1/forecast.json?key=<YOUR_API_KEY>&q=Buenos+Aires&days=6\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      clima: {},\n      query: 'buenos aires',\n      defaultURL: `https://api.apixu.com/v1/forecast.json?key=${process.env.REACT_APP_API_KEY}&lang=es&days=6`,\n      error: false,\n      isLoaded: false\n    };\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    // AGREGAR GEOLOCATION\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({query:`${position.coords.latitude},${position.coords.longitude}`});\n\n    // FETCH DATA FROM API\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128')\n          this.setState({\n          clima: jsonData,\n          isLoaded: true\n          })\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      });\n  }\n\n// HANDLE SEARCH INPUT VALUE\n  handleSearchChange(event) {\n    this.setState({ query: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (event.target.elements.searchfield.value.length > 0) {\n      this.setState({query: event.target.elements.searchfield.value});\n      fetch(this.state.defaultURL + '&q=' + this.state.query)\n        .then(response => response.json())\n        .then(jsonData => {\n          jsonData.current.condition.icon = jsonData.current.condition.icon.replace('64x64','128x128');\n          this.setState({clima: jsonData });\n        })\n        .catch(err =>  {\n          this.setState({error: true})\n          console.log('an error occurred: ', err)\n        })\n      }\n\n  }\n\n\n  render() {\n    const { location, current, forecast } = this.state.clima;\n\n    if (!this.state.error) {\n      console.log('Rendering, everything looks good...');\n    }\n\n    return this.state.isLoaded ? (\n      <div className=\"App\">\n        <SearchBox\n          onSearchChange={this.handleSearchChange}\n          onBtnSubmit={this.handleSubmit}\n          query={this.state.query}\n        />\n        <Main\n          current={current}\n          location={location}\n        />\n        <Forecast forecast={forecast}/>\n      </div>\n    ) : (\n      <div className=\"loading\">Loading...</div>\n    )\n\n\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './cont/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}